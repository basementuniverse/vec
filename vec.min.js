const{times:times,chunk:chunk,dot:dot}=require("@basementuniverse/utils"),vec=(t,e)=>t||e?"object"==typeof t?{x:t.x||0,y:t.y||0}:null==e?{x:t,y:t}:{x:t,y:e}:{x:0,y:0};vec.components=t=>[t.x,t.y],vec.ux=()=>vec(1,0),vec.uy=()=>vec(0,1),vec.add=(t,e)=>({x:t.x+e.x,y:t.y+e.y}),vec.mul=(t,e)=>({x:t.x*e,y:t.y*e}),vec.sub=(t,e)=>({x:t.x-e.x,y:t.y-e.y}),vec.len=t=>Math.sqrt(t.x*t.x+t.y*t.y),vec.manhattan=t=>Math.abs(t.x)+Math.abs(t.y),vec.nor=t=>{let e=vec.len(t);return e?{x:t.x/e,y:t.y/e}:vec()},vec.dot=(t,e)=>t.x*e.x+t.y*e.y,vec.rot=(t,e)=>{let m=Math.sin(e),n=Math.cos(e);return{x:n*t.x-m*t.y,y:m*t.x+n*t.y}},vec.eq=(t,e)=>t.x===e.x&&t.y===e.y,vec.rad=t=>Math.atan2(t.y,t.x),vec.cpy=t=>vec(t),vec.map=(t,e)=>({x:e(t.x,"x"),y:e(t.y,"y")}),vec.str=(t,e=", ")=>`${t.x}${e}${t.y}`;const mat=(t=4,e=4,m=[])=>({m:t,n:e,entries:m.concat(Array(t*e).fill(0)).slice(0,t*e)});mat.identity=t=>mat(t,t,Array(t*t).fill(0).map(((e,m)=>+(Math.floor(m/t)===m%t)))),mat.get=(t,e,m)=>t.entries[m-1+(e-1)*t.n],mat.set=(t,e,m,n)=>{t.entries[m-1+(e-1)*t.n]=n},mat.row=(t,e)=>{const m=(e-1)*t.n;return t.entries.slice(m,m+t.n)},mat.col=(t,e)=>times((m=>mat.get(t,m+1,e)),t.m),mat.add=(t,e)=>t.m===e.m&&t.n===e.n&&mat.map(t,((t,m)=>t+e.entries[m])),mat.sub=(t,e)=>t.m===e.m&&t.n===e.n&&mat.map(t,((t,m)=>t-e.entries[m])),mat.mul=(t,e)=>{if(t.n!==e.m)return!1;const m=mat(t.m,e.n);for(let n=1;n<=t.m;n++)for(let a=1;a<=e.n;a++)mat.set(m,n,a,dot(mat.row(t,n),mat.col(e,a)));return m},mat.scale=(t,e)=>mat.map(t,(t=>t*e)),mat.trans=t=>mat(t.n,t.m,times((e=>mat.col(t,e+1)),t.n).flat()),mat.minor=(t,e,m)=>{if(t.m!==t.n)return!1;const n=[];for(let a=1;a<=t.m;a++)if(a!==e)for(let e=1;e<=t.n;e++)e!==m&&n.push(mat.get(t,a,e));return mat(t.m-1,t.n-1,n)},mat.det=t=>{if(t.m!==t.n)return!1;if(1===t.m)return t.entries[0];if(2===t.m)return t.entries[0]*t.entries[3]-t.entries[1]*t.entries[2];let e=0,m=1;for(let n=1;n<=t.n;n++)e+=m*t.entries[n-1]*mat.det(mat.minor(t,1,n)),m*=-1;return e},mat.nor=t=>{if(t.m!==t.n)return!1;const e=mat.det(t);return mat.map(t,(t=>t*e))},mat.adj=t=>{const e=mat(t.m,t.n);for(let m=1;m<=t.m;m++)for(let n=1;n<=t.n;n++)mat.set(e,m,n,mat.det(mat.minor(t,m,n)));const m=mat.map(e,((t,e)=>t*(e%2?-1:1)));return mat.trans(m)},mat.inv=t=>{if(t.m!==t.n)return!1;const e=mat.det(t);return 0!==e&&mat.scale(mat.adj(t),1/e)},mat.eq=(t,e)=>t.m===e.m&&t.n===e.n&&mat.str(t)===mat.str(e),mat.cpy=t=>mat(t.m,t.n,[...t.entries]),mat.map=(t,e)=>mat(t.m,t.n,t.entries.map(e)),mat.str=(t,e=", ",m="\n")=>chunk(t.entries,t.n).map((t=>t.join(e))).join(m),"undefined"!=typeof module&&(module.exports={vec:vec,mat:mat});